app.py:
from flask import Flask, render_template, request, redirect, url_for


# Import the predict_sentiment function
import NLP_model

app = Flask(__name__)


@app.route('/', methods=['GET', 'POST'])
def index():

    result = None
    if request.method == 'POST':
        result = {}

        # Text input from the form
        text_input = request.form['text_input']
        result["text_input"] = text_input

        # Predict the sentiment
        predicted_sentiment = None  # positive, neutral, negative
        if text_input:
            predicted_sentiment = NLP_model.predict_sentiment(
                text_input)
        else:
            predicted_sentiment = "Please enter some text."

        result["predicted_sentiment"] = predicted_sentiment

    return render_template("index.html", result=result)


if __name__ == "__main__":
    app.run(debug=True)


NLP_model.py:
import joblib
import string
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import pickle
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import pandas as pd
import numpy as np
import re
import time

import nltk
nltk.download('stopwords')
nltk.download('punkt')


def load_sentiment_model(model_path):

    model = joblib.load(model_path)
    return model


def text_process(message):
    """
    Takes in a string of text, then performs the following:
    1. Remove all punctuation
    2. Remove all stopwords
    3. Remove links (HTTP, //, etc.)
    4. Convert all text to lowercase
    5. Remove short words (e.g., words with 2 or fewer characters)
    6. Returns a cleaned string
    """

    STOPWORDS = set(stopwords.words('english')).union(
        ['u', 'ü', 'ur', '4', '2', 'im', 'dont', 'doin', 'ure'])

    # Remove links using regular expressions
    message = re.sub(r'http\S+', '', message)  # Remove HTTP links
    message = re.sub(r'www\.\S+', '', message)   # Remove www links
    message = re.sub(r'\/\/\S+', '', message)    # Remove // links
    message = re.sub('\[.*?\]', '', message)
    message = re.sub('https?://\S+|www\.\S+', '', message)
    message = re.sub('<.*?>+', '', message)
    message = re.sub('[%s]' % re.escape(string.punctuation), '', message)
    message = re.sub('\n', '', message)
    message = re.sub('\w*\d\w*', '', message)

    # Tokenize the text
    words = word_tokenize(message)

    # Check characters to see if they are in punctuation
    nopunc = [word for word in words if word not in string.punctuation]

    # Convert the text to lowercase and remove short words
    cleaned_words = [word.lower() for word in nopunc if len(word) > 2]

    # Now just remove any stopwords and return a cleaned string
    return ' '.join([word for word in cleaned_words if word not in STOPWORDS])


def predict_sentiment(text, model_path='./static/models/my_best_sentiment_model_1695647318.9605517.sav'):

    model = load_sentiment_model(model_path)

    # Perform the necessary text preprocessing
    cleaned_text = text_process(text)

    # Vectorize the cleaned text
    vect = pickle.load(open("./static/models/my_vect.pkl", "rb"))
    text_dtm = vect.transform([cleaned_text])

    # Predict sentiment using the loaded model
    sentiment_label = model.predict(text_dtm)[0]

    # Map the numerical sentiment label back to the original sentiment
    sentiment_mapping = {0: 'positive', 1: 'neutral', 2: 'negative'}
    predicted_sentiment = sentiment_mapping[sentiment_label]

    return predicted_sentiment


if __name__ == '__main__':

    mode = 2  # 1: small test, 2: large test

    if mode == 1:
        input_texts = [
            "I love this product, it's amazing!",
            "This is a neutral statement.",
            "I dislike this product, it's terrible!",
            "Great experience with the service!",
            "The movie was fantastic and thrilling.",
            "It's just okay, not too bad.",
            "This book is a masterpiece.",
            "The weather today is terrible.",
            "The event was so-so, not very exciting.",
            "I'm feeling great today."
        ]
        actual_sentiments = ['positive', 'neutral', 'negative', 'positive', 'positive',
                             'neutral', 'positive', 'negative', 'neutral', 'positive']
    elif mode == 2:
        test = pd.read_csv('./static/data/test.csv')

        input_texts = test['text'].values
        actual_sentiments = test['sentiment'].values

    correct_count = 0
    incorrect_count = 0

    # Initialize variables to store true and predicted labels
    true_labels = []
    predicted_labels = []

    start_time = time.time()

    for input_text, actual_sentiment in zip(input_texts, actual_sentiments):
        predicted_sentiment = predict_sentiment(input_text)

        true_labels.append(actual_sentiment)
        predicted_labels.append(predicted_sentiment)

        if predicted_sentiment == actual_sentiment:
            correct_count += 1
        else:
            incorrect_count += 1

        # print(f"Input Text: {input_text}")
        # print(f"Predicted Sentiment: {predicted_sentiment}")
        # print(f"Actual Sentiment: {actual_sentiment}")
        # print("\n")

    # Create a bar chart to visualize the results
    labels = ['Correct', 'Incorrect']
    counts = [correct_count, incorrect_count]

    plt.figure(figsize=(8, 6), dpi=200)
    plt.bar(labels, counts, color=['green', 'red'])
    plt.xlabel('Predictions')
    plt.ylabel('Count')
    plt.title('Sentiment Analysis Results')

    # Save the bar chart as an image under static/graphs folder
    plt.savefig('./static/graphs/sentiment_bar_chart.png')

    plt.show()

    # Calculate the confusion matrix
    cm = confusion_matrix(true_labels, predicted_labels, labels=[
        'positive', 'neutral', 'negative'])

    print("Confusion Matrix:")
    print(cm)

    # Plot the confusion matrix as a heatmap
    fig, ax = plt.subplots(figsize=(8, 6), dpi=200)
    im = ax.imshow(cm, interpolation='nearest', cmap="Blues")
    ax.figure.colorbar(im, ax=ax)
    ax.set(xticks=np.arange(cm.shape[1]),
           yticks=np.arange(cm.shape[0]),
           xticklabels=['positive', 'neutral', 'negative'],
           yticklabels=['positive', 'neutral', 'negative'],
           title='Confusion Matrix',
           ylabel='True label',
           xlabel='Predicted label')

    # Loop over data dimensions and create text annotations
    fmt = 'd'
    thresh = cm.max() / 2.
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, format(cm[i, j], fmt),
                    ha="center", va="center",
                    color="white" if cm[i, j] > thresh else "black")

    fig.tight_layout()

    # Save the confusion matrix plot as an image under static/graphs folder
    plt.savefig('./static/graphs/confusion_matrix.png')

    plt.show()

    end_time = time.time()
    elapsed_time = round(end_time - start_time, 2)
    print(f"Elapsed time: {elapsed_time} seconds")

    # Accuracy
    accuracy = round(
        correct_count / (correct_count + incorrect_count) * 100, 2)
    print(f"Accuracy: {accuracy}%")


templates/index.html:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sentiment Analysis</title>

    <!-- Favicon -->
    <link
      rel="shortcut icon"
      href="{{ url_for('static', filename='images/favicon.png') }}"
      type="image/x-icon"
    />

    <!-- Custom CSS -->
    <link
      rel="stylesheet"
      href="{{ url_for('static', filename='css/index.css') }}"
    />
  </head>

  <body>
    <div class="central-span">
      <h1 class="title">Sentimentinator</h1>

      <!-- Description -->
      <div class="description">
        <h2>Description</h2>
        <p>
          In our quest for profound insights, we stumbled upon a revelation
          hidden within our black-and-white color scheme. You see, it's not just
          any color palette; it's the very same one mimes are stereotypically
          associated with—yes, those silent performers who communicate without
          words. Much like our fellow mime, Charlie Chaplin, we too won't "talk"
          to the person interacting with us, but fear not, for we're still
          masters at expressing and reflecting the emotions that dwell within
          them, all while maintaining our silence. We're the
          <span class="sentimentinators">Sentimentinators</span>, and we're here
          to help you understand the emotions behind the words you type.
        </p>
      </div>

      <!-- Input Form -->
      <form action="/" method="POST" class="input-form">
        <div class="input-title">
          Hi,<br /><span>Enter text to predict sentiment</span>
        </div>
        <input
          type="text"
          id="text_input"
          name="text_input"
          placeholder="Enter text"
          class="input"
        />
        <button type="submit" class="button-submit">Submit</button>
      </form>

      <!-- Sample Text Prompts -->
      <div class="sample-text-prompts">
        <h3>Sample Text Prompts:</h3>
        <ul>
          <li>
            <a href="#" onclick="submitSampleText('Today is a good day!')"
              >Today is a good day!</a
            >
          </li>
          <li>
            <a
              href="#"
              onclick="submitSampleText('This is a neutral statement.')"
              >This is a neutral statement.</a
            >
          </li>
          <li>
            <a href="#" onclick="submitSampleText('The event was bad.')"
              >The event was bad.</a
            >
          </li>
        </ul>
      </div>

      <!-- Predicted Sentiment Result -->
      {% if result %}
      <div class="result" id="result">
        <h2>Input Text</h2>
        <p>{{ result.text_input }}</p>
        <h2>Predicted Sentiment:</h2>
        <p class="prediction-{{result.predicted_sentiment}}">
          {{ result.predicted_sentiment }}
        </p>
      </div>
      {% endif %}

      <!-- Model Description -->
      <div class="model-details">
        <h2>Model Details</h2>
        <p>
          The Sentiment Analysis model presented here utilizes Natural Language
          Processing (NLP) techniques to discern the sentiment conveyed in text
          data. It starts by transforming textual information into numerical
          data through Count Vectorization and TF-IDF transformations. A
          Multinomial Naive Bayes classifier is employed to predict sentiment
          labels, with hyperparameter tuning to enhance model accuracy. The
          best-performing model is saved for future use. This model serves as
          the analytical engine behind Sentimentinator, allowing you to gain
          insights into the emotions concealed within the text you input. For
          more details, please refer to the
          <a
            href="https://github.com/Hardvan/My-Machine-Learning-Projects/blob/main/Kaggle%20Practice/12_Sentiment_Analysis/Sentiment_Analysis.ipynb"
            target="_blank"
            >Sentiment_Analysis.ipynb</a
          >
          Jupyter Notebook.
        </p>
      </div>
    </div>

    <footer class="footer">
      <h2>
        Made with 🤍 by <a href="https://github.com/Hardvan">Hardvan</a>,
        <a href="https://github.com/Krounosity">Krounosity</a>
      </h2>
    </footer>

    <!-- Custom JS -->
    <script src="{{ url_for('static', filename='js/index.js') }}"></script>
    <script>
      // Handle sample text prompts
      function submitSampleText(sentiment) {
        const textInput = document.getElementById("text_input");
        textInput.value = sentiment;
        document.querySelector("form.input-form").submit();
      }

      function addHoveredClass(element) {
        element.classList.add("hovered");
      }
      function removeHoveredClass(element) {
        element.classList.remove("hovered");
      }

      // Automatically add hover effect to sentimentinator span in description after 2 seconds
      const sentimentinators = document.querySelectorAll(".sentimentinators");
      setInterval(() => {
        // Remove the hover effect from the current element
        removeHoveredClass(sentimentinators[0]);

        // Apply the hover effect to the new current element
        addHoveredClass(sentimentinators[0]);
      }, 2000);

      // Automatically scroll to result after form submission
      const result = document.getElementById("result");
      if (result) {
        result.scrollIntoView();
      }
    </script>
  </body>
</html>


